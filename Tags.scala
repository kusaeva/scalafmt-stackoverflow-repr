import scala.reflect.runtime.universe.{typeOf, Type}

class DocumentationHandler extends SwaggerApiInfoHandler with Logging {

  override def swaggerConfig: Swagger = {
    val sw = super.swaggerConfig
    sw.info(
      new Info()
    )
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      .tag(new Tag().name("foo1").description("bar1"))
      
      .tag(new Tag().name("stack").description("overflow"))
  
  }
}

